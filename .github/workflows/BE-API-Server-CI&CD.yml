name: back-end [API-Server] CI & CD

on:
  push:
    branches: "**"
env:
  DOCKER_IMAGE: ghcr.io/boostcampwm-2021/web15-tadaktadak/server/api
  VERSION: ${{ github.sha }}

jobs:
  build:
    name: API 서버 CI 및 빌드를 진행합니다.
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server/api
    steps:
      - name: 소스코드로 체크아웃 합니다.
        uses: actions/checkout@v2

      - name: npm 모듈들을 캐싱합니다.
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}

      - name: npm 으로 패키지 다운로드합니다.
        run: npm install

      - name: CI 작업을 수행합니다.
        run: npm run ci

      - name: docker buildx를 설치합니다.
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: 도커 레이어를 캐싱합니다.
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Github Container Registry로 로그인합니다.
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.DEPLOY_API_SERVER_CR }}

      - name: 빌드하고 푸시합니다.
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.DOCKER_IMAGE }}:${{ env.VERSION }}
          context: ./server/api

  deploy:
    needs: build
    name: API 서버 배포를 진행합니다.
    runs-on: [self-hosted, label-api-server]
    steps:
    - name: Github Container Registry로 로그인합니다.
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.DEPLOY_API_SERVER_CR }}
      - name: 도커 컨테이너를 실행합니다.
          run: |
            docker ps -q --filter "name=api-container" | grep -q . && docker stop api-container && docker rm -fv api-container
            docker run -d \
            -e DB_MYSQL_HOST=${{ secrets.DB_MYSQL_HOST }} \
            -e DB_MYSQL_PORT=${{ secrets.DB_MYSQL_PORT }} \
            -e DB_MYSQL_USERNAME=${{ secrets.DB_MYSQL_USERNAME }} \
            -e DB_MYSQL_PASSWORD=${{ secrets.DB_MYSQL_PASSWORD }} \
            -e DB_MYSQL_DATABASE=${{ secrets.DB_MYSQL_DATABASE }} \
            -e AGORA_APP_ID=${{ secrets.AGORA_APP_ID }} \
            -e AGORA_APP_CERTIFICATE=${{ secrets.AGORA_APP_CERTIFICATE }} \
            -e NCP_ACCESS_KEY=${{ secrets.NCP_ACCESS_KEY }} \
            -e NCP_SECRET_KEY=${{ secrets.NCP_SECRET_KEY }} \
            -e NCP_BUCKET_NAME=${{ secrets.NCP_BUCKET_NAME }} \
            -e NCP_OBJ_STORAGE_END_POINT=${{ secrets.NCP_OBJ_STORAGE_END_POINT }} \
            -e NCP_REGION=${{ secrets.NCP_REGION }} \
            -e API_SERVER_URL=${{ secrets.API_SERVER_URL }} \
            -e CLIENT_URL=${{ secrets.CLIENT_URL }} \
            -e DEFAULT_IMG=${{ secrets.DEFAULT_IMG }} \
            -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
            -p 3000:3000 \
            --name api-container --restart always ${{ env.DOCKER_IMAGE }}:${{ env.VERSION }}
            

            
